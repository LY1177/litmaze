// server.js
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'; // –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞ Supabase self-signed certs

const express    = require('express');
const session    = require('express-session');
const bodyParser = require('body-parser');
const { Sequelize, DataTypes } = require('sequelize');
const path       = require('path');

const app  = express();
const port = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–π Sequelize —Å Postgres –∏–ª–∏ (fallback) SQLite
const sequelize = process.env.DATABASE_URL
  ? new Sequelize(process.env.DATABASE_URL, {
      dialect: 'postgres',
      dialectOptions: {
        ssl: { require: true, rejectUnauthorized: false }
      }
    })
  : new Sequelize({
      dialect: 'sqlite',
      storage: path.join(__dirname, 'mydb.db')
    });

// –î–µ—Ñ–∏–Ω–∏—Ä–∞–π –º–æ–¥–µ–ª–∏—Ç–µ
const User = sequelize.define('User', {
  id:       { type: DataTypes.INTEGER,  primaryKey: true, autoIncrement: true },
  username: { type: DataTypes.STRING,   unique: true, allowNull: false },
  email:    { type: DataTypes.STRING,   unique: true, allowNull: false },
  password: { type: DataTypes.STRING,   allowNull: false },
  points:   { type: DataTypes.INTEGER,  defaultValue: 0 },
}, { tableName: 'users', timestamps: false });

// ... —Ç—É–∫ –¥–æ–±–∞–≤—è—à Question, Author, QuestionOption –∏ –∞—Å–æ—Ü–∏–∞—Ü–∏–∏—Ç–µ, –∫–∞–∫—Ç–æ –ø—Ä–µ–¥–∏ ...

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(session({
  secret: 'your_secret_key',
  resave: false,
  saveUninitialized: false,
}));
// CORS –∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});

// –†—É—Ç–æ–≤–µ
app.get('/api/texts', async (req, res) => {
  // ‚Ä¶ –∞–∫–æ –∏–º–∞—à Text –º–æ–¥–µ–ª, –ø–æ–ª–∑–≤–∞–π sequelize to fetch ‚Ä¶
  res.status(501).json({ error: 'Not implemented' });
});

app.get('/api/questions', async (req, res) => {
  // ‚Ä¶ —Ç–≤–æ—è—Ç code —Å Question.findAll() ‚Ä¶
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/register', async (req, res) => {
  // ‚Ä¶ bcrypt.hash + User.create() ‚Ä¶
});

// –í—Ö–æ–¥
app.post('/login', async (req, res) => {
  // ‚Ä¶ bcrypt.compare + session ‚Ä¶
});

// –¢–æ—á–∫–∏
app.post('/api/points', async (req, res) => {
  // ‚Ä¶ User.findByPk + update points ‚Ä¶
});

// –¢–µ–∫—É—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
app.get('/api/me', (req, res) => {
  // ‚Ä¶ res.json(req.session.user) ‚Ä¶
});

// –ê–¥–º–∏–Ω —Ç–∞–±–ª–∏—Ü–∞
app.get('/admin/table', async (req, res) => {
  // ‚Ä¶ User.findAll({ raw: true }) + –≥–µ–Ω–µ—Ä–∏—Ä–∞–π HTML ‚Ä¶
});

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ: –ø—ä—Ä–≤–æ sync, –ø–æ—Å–ª–µ listen
(async () => {
  try {
    await sequelize.sync();
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∏—Ç–µ —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏/–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏');
    app.listen(port, () => console.log(`üöÄ Server listening on port ${port}`));
  } catch (e) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞:', e);
    process.exit(1);
  }
})();
