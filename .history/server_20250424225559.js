// server.js
const express = require('express');
const sqlite3 = require('sqlite3').verbose();

const session = require('express-session');

const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const port = 3000;
const bcrypt = require('bcrypt');
const saltRounds = 10;

// –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ SQLite –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ (mydb.db)
const db = new sqlite3.Database(path.join(__dirname, 'mydb.db'), (err) => {
  if (err) {
    console.error('–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –æ—Ç–≤–æ—Ä–∏ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏:', err.message);
  } else {
    console.log('SQLite –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–æ—Ä–µ–Ω–∞.');
  }
});
const { Sequelize, DataTypes } = require('sequelize');
const isProd = !!process.env.DATABASE_URL;

// –ò–∑–±–∏—Ä–∞–º–µ dialect —Å–ø–æ—Ä–µ–¥ —Ç–æ–≤–∞ –¥–∞–ª–∏ —Å–º–µ –≤ –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–ª–∏ –ª–æ–∫–∞–ª–Ω–æ
const sequelize = isProd
  ? new Sequelize(process.env.DATABASE_URL, {
      dialect: 'postgres',
      dialectOptions: { ssl: { rejectUnauthorized: false } }
    })
  : new Sequelize({
      dialect: 'sqlite',
      storage: path.join(__dirname, 'mydb.db')
    });

// –î–µ—Ñ–∏–Ω–∏—Ä–∞–º–µ User –º–æ–¥–µ–ª–∞
const User = sequelize.define('User', {
  id:       { type: DataTypes.INTEGER,  primaryKey: true, autoIncrement: true },
  username: { type: DataTypes.STRING,   unique: true,    allowNull: false },
  email:    { type: DataTypes.STRING,   unique: true,    allowNull: false },
  password: { type: DataTypes.STRING,   allowNull: false },
  points:   { type: DataTypes.INTEGER,  defaultValue: 0 },
}, {
  tableName: 'users',
  timestamps: true
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –≤ SQLite —Å—ä–∑–¥–∞–≤–∞ users –≤ mydb.db, –≤ Postgres ‚Äì –≤ —Å—ä–æ—Ç–≤–µ—Ç–Ω–∞—Ç–∞ –±–∞–∑–∞
sequelize.sync({ alter: true })
  .then(() => console.log("‚úÖ Sequelize synchronized (only missing columns added)."))
  .catch(err => console.error("‚ùå Sync failed:", err));






app.get('/api/texts', (req, res) => {
  const textId = req.query.id;
  db.get("SELECT content FROM texts WHERE id = ?", [textId], (err, row) => {
    if (err) {
      console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–∞:", err);
      return res.status(500).json({ error: err.message });
    }
    if (!row) {
      return res.status(404).json({ error: "–¢–µ–∫—Å—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω." });
    }
    res.json(row);
  });
});
// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(session({
  secret: 'your_secret_key',
  resave: false,
  saveUninitialized: false,
}));

// CORS –∑–∞–≥–ª–∞–≤–∫–∏ (–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*"); // –ó–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
  res.header("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});


/* ---------------------- API Endpoint –∑–∞ –≤—ä–ø—Ä–æ—Å–∏ ---------------------- */
app.get('/api/questions', (req, res) => {
  let authorName = req.query.author;
  console.log("–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –∞–≤—Ç–æ—Ä:", authorName);
  let sql, params;
  if (!authorName || authorName.trim().toLowerCase() === 'all' ||
    authorName.trim().toLowerCase() === 'obobshtenie' ||
    authorName.trim().toLowerCase() === '–æ–±–æ–±—â–µ–Ω–∏–µ') {
  sql = `
    SELECT q.id AS question_id,
           q.question,
           q.explanation,
           q.type,
           q.text_id,
           COALESCE(qo.label, '') AS label,
           COALESCE(qo.option_text, '') AS option_text,
           COALESCE(qo.is_correct, 0) AS is_correct,
           COALESCE(qo.matching_key, '') AS matching_key
    FROM questions q
    INNER JOIN authors a ON q.author_id = a.id
    LEFT JOIN question_options qo ON q.id = qo.question_id
    WHERE LOWER(a.name) NOT IN ('nvo2022', 'nvo2023', 'nvo2024')
    ORDER BY q.id, qo.id
  `;
  params = [];
} else {
  sql = `
    SELECT q.id AS question_id,
           q.question,
           q.explanation,
           q.type,
           q.text_id,
           COALESCE(qo.label, '') AS label,
           COALESCE(qo.option_text, '') AS option_text,
           COALESCE(qo.is_correct, 0) AS is_correct,
           COALESCE(qo.matching_key, '') AS matching_key
    FROM questions q
    INNER JOIN authors a ON q.author_id = a.id
    LEFT JOIN question_options qo ON q.id = qo.question_id
    WHERE a.name = ?
    ORDER BY q.id, qo.id
  `;
  params = [authorName];
}
    
  db.all(sql, params, (err, rows) => {
    if (err) {
      console.error("Error fetching questions:", err);
      return res.status(500).json({ error: err.message });
    }
    const questionsMap = {};

    rows.forEach(row => {
      if (!questionsMap[row.question_id]) {
        questionsMap[row.question_id] = {
          id: row.question_id,
          question: row.question,
          explanation: row.explanation,
          type: row.type,
          textId: row.text_id, // <-- –ó–∞–ø–∏—Å–≤–∞–º–µ text_id –≤ –æ–±–µ–∫—Ç–∞
          options: []
        };
      }
      // –æ–ø—Ü–∏–∏ (label, option_text, matching_key)
      if (row.label !== '' || row.option_text !== '' || row.matching_key !== '') {
        questionsMap[row.question_id].options.push({
          label: row.label,
          option_text: row.option_text,
          matching_key: row.matching_key,
          is_correct: row.is_correct == 1
        });
      }
    });
    
    let questions = Object.values(questionsMap);
    console.log("–ù–∞–º–µ—Ä–µ–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏:", questions);
    res.json(questions);
  });
});


/* ---------------------- API Endpoint –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---------------------- */
/* ---------------------- API Endpoint –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---------------------- */
app.post('/register', async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password) {
    return res.status(400).send("–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞.");
  }

  try {
    // 1) –•–µ—à–∏—Ä–∞–Ω–µ
    const hash = await bcrypt.hash(password, saltRounds);
    // 2) –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å –≤ –±–∞–∑–∞—Ç–∞ (Sequelize + PostgreSQL)
    await User.create({ username, email, password: hash });
    // 3) –£—Å–ø–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä
    res.status(200).send("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞!");
  } catch(err) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", err.message);
    res.status(500).send("–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–µ—Ç–æ.");
  }
});




/* ---------------------- API Endpoint –∑–∞ –≤—Ö–æ–¥ ---------------------- */
/* ---------------------- API Endpoint –∑–∞ –≤—Ö–æ–¥ ---------------------- */
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) {
    return res.status(400).send("–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞.");
  }

  try {
    // 1) –ù–∞–º–∏—Ä–∞–º–µ user
    const user = await User.findOne({ where: { username } });
    if (!user) return res.status(400).send("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ –∏–º–µ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.");

    // 2) –°—Ä–∞–≤–Ω—è–≤–∞–º–µ –ø–∞—Ä–æ–ª–∞—Ç–∞
    const valid = await bcrypt.compare(password, user.password);
    if (!valid) return res.status(400).send("–ù–µ–≤–∞–ª–∏–¥–Ω–∞ –ø–∞—Ä–æ–ª–∞.");

    // 3) –°–ª–∞–≥–∞–º–µ –¥–∞–Ω–Ω–∏ –≤ —Å–µ—Å–∏—è
    req.session.user = { id: user.id, username: user.username, email: user.email, points: user.points };
    res.status(200).send("–í—Ö–æ–¥—ä—Ç –µ —É—Å–ø–µ—à–µ–Ω!");
  } catch(err) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥:", err.message);
    res.status(500).send("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞.");
  }
});
/* ---------------------- API Endpoint –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ—á–∫–∏ ---------------------- */
app.post('/api/points', async (req, res) => {
  // –í—ä–≤–µ–∂–¥–∞–º–µ JSON { points: 10 } –Ω–∞–ø—Ä–∏–º–µ—Ä
  const { points } = req.body;
  if (!req.session.user) {
    return res.status(401).send("–ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å–∏—è.");
  }
  try {
    // 1) –ù–∞–º–∏—Ä–∞–º–µ —Ç–µ–∫—É—â–∏—è user –ø–æ id –æ—Ç —Å–µ—Å–∏—è—Ç–∞
    const user = await User.findByPk(req.session.user.id);
    if (!user) throw new Error("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.");

    // 2) –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ —Ç–æ—á–∫–∏—Ç–µ
    user.points += Number(points);
    await user.save();

    // 3) –í—Ä—ä—â–∞–º–µ –Ω–æ–≤–∏—è –±—Ä–æ–π —Ç–æ—á–∫–∏
    res.json({ points: user.points });
  } catch(err) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ update –Ω–∞ —Ç–æ—á–∫–∏:", err.message);
    res.status(500).send("–ù–µ—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ç–æ—á–∫–∏—Ç–µ.");
  }
});


// –°–µ—Ä–≤–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –æ—Ç –ø–∞–ø–∫–∞—Ç–∞ public (HTML, CSS, JS, –∞—É–¥–∏–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç.–Ω.)
app.use(express.static('public'));
app.get('/admin/table', (req, res) => {
  const adminKey = req.query.key;
  if (adminKey !== 'demo123') {
    return res.status(401).send("<h2>üö´ –ù–µ–æ—Ç–æ—Ä–∏–∑–∏—Ä–∞–Ω –¥–æ—Å—Ç—ä–ø</h2>");
  }

  db.all("SELECT id, username, email, password FROM users", (err, rows) => {
    if (err) {
      console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏:", err.message);
      return res.status(500).send("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ.");
    }

    let html = `
      <html><head><title>–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏</title>
      <style>table { border-collapse: collapse; width: 100%; } th, td { border: 1px solid #ccc; padding: 8px; }
      th { background: #eee; } code { font-size: 12px; }</style></head><body>
      <h2>üìã –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏</h2>
      <table><tr><th>ID</th><th>–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª</th><th>Email</th><th>–ü–∞—Ä–æ–ª–∞ (bcrypt)</th></tr>
    `;

    rows.forEach(row => {
      html += `<tr>
        <td>${row.id}</td>
        <td>${row.username}</td>
        <td>${row.email}</td>
        <td><code>${row.password}</code></td>
      </tr>`;
    });

    html += `</table></body></html>`;
    res.send(html);
  });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

